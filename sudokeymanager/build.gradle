apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "org.owasp.dependencycheck"

android {
    compileSdk 34
    namespace "com.sudoplatform.sudokeymanager"
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "7.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget=JavaVersion.VERSION_17.toString()
    }

    resourcePrefix 'skm_'

    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
        pickFirst("META-INF/kotlinx-coroutines-core.kotlin_module")
        pickFirst("META-INF/sudokeymanager_debug.kotlin_module")
    }

    sourceSets {
        androidTest {
            resources.srcDirs += ['src/test/resources']
        }
    }

    testOptions.unitTests.all {
        outputs.upToDateWhen {false}
        jacoco {
            includeNoLocationClasses = true
        }
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation "com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0"
    implementation "com.google.code.gson:gson:2.9.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "androidx.annotation:annotation:1.6.0"

    // Sudo Platform
    implementation "com.sudoplatform:sudologging:4.0.0"

    // Unit testing
    testImplementation("junit:junit:4.13.2") {
        exclude module: 'hamcrest-core'
    }
    testImplementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    androidTestImplementation "com.google.guava:guava:30.1.1-android"

    //roboelectric
    testImplementation "org.robolectric:robolectric:4.10.3"

    //testRunner
    androidTestImplementation "androidx.test:runner:1.5.2"

    //espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"

    // timber
    androidTestImplementation "com.jakewharton.timber:timber:5.0.1"
    androidTestImplementation project(':sudokeymanager')
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)

        cve {
            urlModified = "https://anonyome-nist-cve-mirror.s3.amazonaws.com/nvdcve-1.1-modified.json.gz"
            urlBase = "https://anonyome-nist-cve-mirror.s3.amazonaws.com/nvdcve-1.1-%d.json.gz"
            startYear = 2002
            waitTime = 0
        }

        analyzers {
            assemblyEnabled = false
            ossIndex {
                username = "${ossIndexUsername}"
                password = "${ossIndexPassword}"
                warnOnlyOnRemoteErrors = true
            }
        }
    }
}

// https://github.com/cookpad/license-tools-plugin
apply plugin: "com.cookpad.android.licensetools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

task checkLicenseHaveRequiredFields {
    description = "Check every license entry has the mandatory fields"
    group = "verification"
    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl" == null]) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

// Kotlin Lint
apply plugin: 'org.jmailen.kotlinter'

kotlinter {
    ignoreFailures = false
    reporters = ['checkstyle', 'plain']
}

ext {
    projectArtifact = 'sudokeymanager'
    projectDescription = 'Key Manager SDK for the Sudo Platform by Anonyome Labs.'
    projectUrl = 'https://github.com/sudoplatform/sudo-key-manager-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-key-manager-android.git'
    if (project.hasProperty('tag')) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}

// Jacoco test coverage
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

task jacocoTestReport(type: JacocoReport, dependsOn:"testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories.setFrom(
            fileTree(
                    dir: "${buildDir}/tmp/kotlin-classes/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            ),
            fileTree(
                    dir: "${buildDir}/intermediates/javac/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            )
    )
    sourceDirectories.setFrom(files("${buildDir.parent}/sudokeymanager/src/main/java"))
    executionData.setFrom(fileTree(["dir":"$buildDir", "includes":["**/*.exec", "**/*.ec"]]))
}

// Dokka documentation generation
apply plugin: 'org.jetbrains.dokka'

dokkaHtml {
    outputDirectory.set(project.file("$buildDir/javadoc"))
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)
            skipEmptyPackages.set(true)
            includes.from(files("packages.md"))
            // Root URL of the generated documentation to link with. The trailing slash is required!
            externalDocumentationLink {
                url.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/"))
                packageListUrl.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/package-list"))
            }
        }
    }
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-keymanager-android"
    ext.sonarProjectName = "sudo-keymanager-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}
