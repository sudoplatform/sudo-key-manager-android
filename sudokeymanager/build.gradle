apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        androidTest {
            resources.srcDirs += ['src/test/resources']
        }
    }

    testOptions.unitTests.all {
        outputs.upToDateWhen {false}
        jacoco {
            includeNoLocationClasses = true
        }
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation "com.madgag.spongycastle:bcpkix-jdk15on:1.56.0.0"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.annotation:annotation:1.1.0"

    // Unit testing
    testImplementation("junit:junit:4.13.1") {
        exclude module: 'hamcrest-core'
    }
    testImplementation 'org.xerial:sqlite-jdbc:3.16.1'
    androidTestImplementation "com.google.guava:guava:30.1-android"

    //roboelectric
    testImplementation "org.robolectric:robolectric:4.3.1"

    //testRunner
    androidTestImplementation "androidx.test:runner:1.3.0"

    //espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
}

ext {
    PUBLISH_GROUP_ID = 'com.sudoplatform'
    PUBLISH_ARTIFACT_ID = 'sudokeymanager'
    PUBLISH_DESCRIPTION = 'Key Manager SDK for the Sudo Platform by Anonyome Labs.'
    PUBLISH_PROJECT_URL = 'https://github.com/sudoplatform/sudo-key-manager-android'
    PUBLISH_PROJECT_SCM = 'scm:git:github.com/sudoplatform/sudo-key-manager-android.git'
    if (project.hasProperty('tag')) {
        PUBLISH_VERSION = "$tag"
    } else {
        PUBLISH_VERSION = "0.0.0"
    }}

apply from: "${rootProject.projectDir}/publish-mavencentral.gradle"

// Jacoco test coverage
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn:"testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories.setFrom(
            fileTree(
                    dir: "${buildDir}/tmp/kotlin-classes/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            ),
            fileTree(
                    dir: "${buildDir}/intermediates/javac/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            )
    )
    sourceDirectories.setFrom(files("${buildDir.parent}/sudokeymanager/src/main/java"))
    executionData.setFrom(fileTree(["dir":"$buildDir", "includes":["**/*.exec", "**/*.ec"]]))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-keymanager-android"
    ext.sonarProjectName = "sudo-keymanager-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}
